// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Fruit_detectionCompdef_FruitDetection_BODY

/************************************************************
 FruitDetection class body
 ************************************************************/

// include associated header file
#include "Fruit_detectionCompdef/FruitDetection.h"

// Derived includes directives
#include "Fruit_detectionCompdef/FruitDetection_impl.h"
#include "rclcpp/rclcpp.hpp"

// Include from Include declaration (body)
// declare options
rclcpp::NodeOptions fruitdetection_options;

int main(int argc, char **argv) {
	rclcpp::init(argc, argv);

	auto fruitdetection = std::make_shared<
			Fruit_detectionCompdef::FruitDetection_impl>(
			fruitdetection_options);

	RCLCPP_INFO(fruitdetection->get_logger(),
			"FruitDetection has been initialized");

	rclcpp::executors::MultiThreadedExecutor executor;

	executor.add_node(fruitdetection->get_node_base_interface());

	executor.spin();
	rclcpp::shutdown();
}

// End of Include declaration (body)

namespace Fruit_detectionCompdef {

// static attributes (if any)

/**
 * 
 * @param options 
 */
FruitDetection::FruitDetection(rclcpp::NodeOptions /*in*/options) :
		rclcpp_lifecycle::LifecycleNode("FruitDetection", options) {
	image_sub_ =
			create_subscription<sensor_msgs::msg::Image>("image",
					rclcpp::QoS(rclcpp::KeepLast(100)).best_effort(),
					std::bind(
							&Fruit_detectionCompdef::FruitDetection_impl::FruitDetectionHandler,
							(FruitDetection_impl*) this,
							std::placeholders::_1));

	BoxImage_pub_ = create_publisher<fruit_detection::msg::BoxesImage>(
			"BoxImage", 1);
	// directly activate a publisher
	BoxImage_pub_->on_activate();

}

} // of namespace Fruit_detectionCompdef

/************************************************************
 End of FruitDetection class body
 ************************************************************/
