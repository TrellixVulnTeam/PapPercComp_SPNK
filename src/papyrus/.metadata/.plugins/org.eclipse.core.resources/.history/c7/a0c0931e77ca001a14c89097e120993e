// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define HandTrackerComponentCompdef_HandTrackerComponent_BODY

/************************************************************
 HandTrackerComponent class body
 ************************************************************/

// include associated header file
#include "HandTrackerComponentCompdef/HandTrackerComponent.h"

// Derived includes directives
#include "HandTrackerComponentCompdef/HandTrackerComponent_impl.h"
#include "rclcpp/rclcpp.hpp"

// Include from Include declaration (body)
// declare options
rclcpp::NodeOptions handtrackercomponent_options;

int main(int argc, char **argv) {
	rclcpp::init(argc, argv);

	auto handtrackercomponent = std::make_shared
			< HandTrackerComponentCompdef::HandTrackerComponent_impl
			> (handtrackercomponent_options);

	RCLCPP_INFO(handtrackercomponent->get_logger(),
			"HandTrackerComponent has been initialized");

	rclcpp::executors::MultiThreadedExecutor executor;

	executor.add_node(handtrackercomponent->get_node_base_interface());

	executor.spin();
	rclcpp::shutdown();
}

// End of Include declaration (body)

namespace HandTrackerComponentCompdef {

// static attributes (if any)

/**
 * 
 * @param options 
 */
HandTrackerComponent::HandTrackerComponent(rclcpp::NodeOptions /*in*/options) :
		rclcpp_lifecycle::LifecycleNode("HandTrackerComponent", options) {
	video_input_send_ = create_publisher < sensor_msgs::msg::Image
			> ("video_input", 1);
	// directly activate a publisher
	video_input_send_->on_activate();

	points_output_pub_ = create_publisher < geometry_msgs::msg::PoseArray
			> ("points_output", 1);
	// directly activate a publisher
	points_output_pub_->on_activate();

}

} // of namespace HandTrackerComponentCompdef

/************************************************************
 End of HandTrackerComponent class body
 ************************************************************/
