// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Rgbd_surface_reconstructionCompdef_Rgbd_surface_reconstruction_BODY

/************************************************************
 Rgbd_surface_reconstruction class body
 ************************************************************/

// include associated header file
#include "Rgbd_surface_reconstructionCompdef/Rgbd_surface_reconstruction.h"

// Derived includes directives
#include "Rgbd_surface_reconstructionCompdef/Rgbd_surface_reconstruction_impl.h"
#include "rclcpp/rclcpp.hpp"

// Include from Include declaration (body)
// declare options
rclcpp::NodeOptions rgbd_surface_reconstruction_options;

int main(int argc, char **argv) {
	rclcpp::init(argc, argv);

	auto rgbd_surface_reconstruction =
			std::make_shared<
					Rgbd_surface_reconstructionCompdef::Rgbd_surface_reconstruction_impl>(
					rgbd_surface_reconstruction_options);

	RCLCPP_INFO(rgbd_surface_reconstruction->get_logger(),
			"Rgbd_surface_reconstruction has been initialized");

	rclcpp::executors::MultiThreadedExecutor executor;

	executor.add_node(rgbd_surface_reconstruction->get_node_base_interface());

	while(!rgbd_surface_reconstruction->_finished){
		executor.spin_once();
		rgbd_surface_reconstruction->process_frames();
	}
	rclcpp::shutdown();
}

// End of Include declaration (body)

namespace Rgbd_surface_reconstructionCompdef {

// static attributes (if any)

/**
 * 
 * @param options 
 */
Rgbd_surface_reconstruction::Rgbd_surface_reconstruction(
		rclcpp::NodeOptions /*in*/options) :
		rclcpp_lifecycle::LifecycleNode("Rgbd_surface_reconstruction", options) {
	depth_image_sub_ =
			create_subscription<sensor_msgs::msg::Image>("depth_image",
					rclcpp::QoS(rclcpp::KeepLast(100)).reliable(),
					std::bind(
							&Rgbd_surface_reconstructionCompdef::Rgbd_surface_reconstruction_impl::depth_image_handler,
							(Rgbd_surface_reconstruction_impl*) this,
							std::placeholders::_1));
	color_image_sub_ =
			create_subscription<sensor_msgs::msg::Image>("color_image",
					rclcpp::QoS(rclcpp::KeepLast(100)).reliable(),
					std::bind(
							&Rgbd_surface_reconstructionCompdef::Rgbd_surface_reconstruction_impl::color_image_handler,
							(Rgbd_surface_reconstruction_impl*) this,
							std::placeholders::_1));
	
	pose_sub_ =
			create_subscription<geometry_msgs::msg::PoseStamped>("camera_pose",
					rclcpp::QoS(rclcpp::KeepLast(100)).reliable(),
					std::bind(
							&Rgbd_surface_reconstructionCompdef::Rgbd_surface_reconstruction_impl::pose_handler,
							(Rgbd_surface_reconstruction_impl*) this,
							std::placeholders::_1));

	surface_mesh_pub_ = create_publisher<shape_msgs::msg::Mesh>("surface_mesh",
			1);
	// directly activate a publisher
	surface_mesh_pub_->on_activate();


}

} // of namespace Rgbd_surface_reconstructionCompdef

/************************************************************
 End of Rgbd_surface_reconstruction class body
 ************************************************************/
