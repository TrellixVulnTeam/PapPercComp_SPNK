// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define VOSCompdef_VOS_BODY

/************************************************************
 VOS class body
 ************************************************************/

// include associated header file
#include "VOSCompdef/VOS.h"

// Derived includes directives
//#include "VOSCompdef/VOS_impl.h"
#include "rclcpp/rclcpp.hpp"

// Include from Include declaration (body)
// declare options
rclcpp::NodeOptions vos_options;

int main(int argc, char **argv) {
	rclcpp::init(argc, argv);

	auto vos = std::make_shared<VOSCompdef::VOS>(vos_options);

	RCLCPP_INFO(vos->get_logger(), "VOS has been initialized");

	rclcpp::executors::MultiThreadedExecutor executor;

	executor.add_node(vos->get_node_base_interface());

	executor.spin();
	rclcpp::shutdown();
}

// End of Include declaration (body)

namespace VOSCompdef {

// static attributes (if any)

/**
 * 
 * @param options 
 */

void VOS::fNewFunction(
		const sensor_msgs::msg::Image::SharedPtr /*in*/image) {
	auto img_msg = sensor_msgs::msg::Image();
	img_msg = *image;
	RCLCPP_INFO(this->get_logger(),"Image received!");
}

VOS::VOS(rclcpp::NodeOptions /*in*/options) :
		rclcpp_lifecycle::LifecycleNode("VOS", options) {
	segmentation_pub_ = create_publisher<sensor_msgs::msg::Image>(
			"segmentation", 1);
	// directly activate a publisher
	segmentation_pub_->on_activate();

	image_sub_ = create_subscription<sensor_msgs::msg::Image>("image",
			rclcpp::QoS(rclcpp::KeepLast(100)).best_effort(),
			std::bind(&VOSCompdef::VOS::fNewFunction, (VOS*) this,
					std::placeholders::_1));

}

} // of namespace VOSCompdef

/************************************************************
 End of VOS class body
 ************************************************************/
