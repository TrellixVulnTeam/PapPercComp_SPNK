// Generated by gencpp from file robot_move/classbox.msg
// DO NOT EDIT!


#ifndef ROBOT_MOVE_MESSAGE_CLASSBOX_H
#define ROBOT_MOVE_MESSAGE_CLASSBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_move
{
template <class ContainerAllocator>
struct classbox_
{
  typedef classbox_<ContainerAllocator> Type;

  classbox_()
    : xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)
    , fruit_name()
    , disease()
    , disease_score(0)  {
    }
  classbox_(const ContainerAllocator& _alloc)
    : xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)
    , fruit_name(_alloc)
    , disease(_alloc)
    , disease_score(0)  {
  (void)_alloc;
    }



   typedef float _xmin_type;
  _xmin_type xmin;

   typedef float _xmax_type;
  _xmax_type xmax;

   typedef float _ymin_type;
  _ymin_type ymin;

   typedef float _ymax_type;
  _ymax_type ymax;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fruit_name_type;
  _fruit_name_type fruit_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _disease_type;
  _disease_type disease;

   typedef int32_t _disease_score_type;
  _disease_score_type disease_score;





  typedef boost::shared_ptr< ::robot_move::classbox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_move::classbox_<ContainerAllocator> const> ConstPtr;

}; // struct classbox_

typedef ::robot_move::classbox_<std::allocator<void> > classbox;

typedef boost::shared_ptr< ::robot_move::classbox > classboxPtr;
typedef boost::shared_ptr< ::robot_move::classbox const> classboxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_move::classbox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_move::classbox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_move::classbox_<ContainerAllocator1> & lhs, const ::robot_move::classbox_<ContainerAllocator2> & rhs)
{
  return lhs.xmin == rhs.xmin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymin == rhs.ymin &&
    lhs.ymax == rhs.ymax &&
    lhs.fruit_name == rhs.fruit_name &&
    lhs.disease == rhs.disease &&
    lhs.disease_score == rhs.disease_score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_move::classbox_<ContainerAllocator1> & lhs, const ::robot_move::classbox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_move

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_move::classbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_move::classbox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_move::classbox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_move::classbox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_move::classbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_move::classbox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_move::classbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ac5ba265d41a94c33d04edeceda4b16";
  }

  static const char* value(const ::robot_move::classbox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ac5ba265d41a94cULL;
  static const uint64_t static_value2 = 0x33d04edeceda4b16ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_move::classbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_move/classbox";
  }

  static const char* value(const ::robot_move::classbox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_move::classbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 xmin\n"
"float32 xmax\n"
"float32 ymin\n"
"float32 ymax\n"
"string fruit_name\n"
"string disease\n"
"int32 disease_score\n"
;
  }

  static const char* value(const ::robot_move::classbox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_move::classbox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xmin);
      stream.next(m.xmax);
      stream.next(m.ymin);
      stream.next(m.ymax);
      stream.next(m.fruit_name);
      stream.next(m.disease);
      stream.next(m.disease_score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct classbox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_move::classbox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_move::classbox_<ContainerAllocator>& v)
  {
    s << indent << "xmin: ";
    Printer<float>::stream(s, indent + "  ", v.xmin);
    s << indent << "xmax: ";
    Printer<float>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymin: ";
    Printer<float>::stream(s, indent + "  ", v.ymin);
    s << indent << "ymax: ";
    Printer<float>::stream(s, indent + "  ", v.ymax);
    s << indent << "fruit_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fruit_name);
    s << indent << "disease: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.disease);
    s << indent << "disease_score: ";
    Printer<int32_t>::stream(s, indent + "  ", v.disease_score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MOVE_MESSAGE_CLASSBOX_H
